// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fillConstraintMatrixGaps
NumericMatrix fillConstraintMatrixGaps(NumericMatrix M, NumericVector MinGap);
RcppExport SEXP _DispatchOptimizationEngine_fillConstraintMatrixGaps(SEXP MSEXP, SEXP MinGapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MinGap(MinGapSEXP);
    rcpp_result_gen = Rcpp::wrap(fillConstraintMatrixGaps(M, MinGap));
    return rcpp_result_gen;
END_RCPP
}
// optimizeBatteryStorageDP
List optimizeBatteryStorageDP(DataFrame BatteryData, NumericVector LoadVector, NumericVector ChargeStates, DataFrame TransitionList, int initial_state, int final_state);
RcppExport SEXP _DispatchOptimizationEngine_optimizeBatteryStorageDP(SEXP BatteryDataSEXP, SEXP LoadVectorSEXP, SEXP ChargeStatesSEXP, SEXP TransitionListSEXP, SEXP initial_stateSEXP, SEXP final_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type BatteryData(BatteryDataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LoadVector(LoadVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ChargeStates(ChargeStatesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type TransitionList(TransitionListSEXP);
    Rcpp::traits::input_parameter< int >::type initial_state(initial_stateSEXP);
    Rcpp::traits::input_parameter< int >::type final_state(final_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeBatteryStorageDP(BatteryData, LoadVector, ChargeStates, TransitionList, initial_state, final_state));
    return rcpp_result_gen;
END_RCPP
}
// optimizeGeneration
List optimizeGeneration(NumericMatrix CommitMatrix, IntegerVector AlwaysOn, DataFrame PlantParameters, DataFrame UnitList, NumericMatrix StateGenerationMatrix, NumericMatrix StateHeatRateMatrix, NumericVector PowerPriceVector, NumericVector LoadVector, DataFrame HourIndexList);
RcppExport SEXP _DispatchOptimizationEngine_optimizeGeneration(SEXP CommitMatrixSEXP, SEXP AlwaysOnSEXP, SEXP PlantParametersSEXP, SEXP UnitListSEXP, SEXP StateGenerationMatrixSEXP, SEXP StateHeatRateMatrixSEXP, SEXP PowerPriceVectorSEXP, SEXP LoadVectorSEXP, SEXP HourIndexListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type CommitMatrix(CommitMatrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type AlwaysOn(AlwaysOnSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type PlantParameters(PlantParametersSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type UnitList(UnitListSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type StateGenerationMatrix(StateGenerationMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type StateHeatRateMatrix(StateHeatRateMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PowerPriceVector(PowerPriceVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LoadVector(LoadVectorSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type HourIndexList(HourIndexListSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeGeneration(CommitMatrix, AlwaysOn, PlantParameters, UnitList, StateGenerationMatrix, StateHeatRateMatrix, PowerPriceVector, LoadVector, HourIndexList));
    return rcpp_result_gen;
END_RCPP
}
// optimizeUnitCommitmentDP
List optimizeUnitCommitmentDP(List OptParameters, DataFrame PlantParameters, DataFrame UnitList, NumericVector PowerPriceVector, NumericVector LoadVector, NumericMatrix MustRunMatrix, NumericMatrix OutageMatrix, NumericVector StackOnMatrix, NumericVector StackOffMatrix, DataFrame HourIndexList, IntegerVector InitialState);
RcppExport SEXP _DispatchOptimizationEngine_optimizeUnitCommitmentDP(SEXP OptParametersSEXP, SEXP PlantParametersSEXP, SEXP UnitListSEXP, SEXP PowerPriceVectorSEXP, SEXP LoadVectorSEXP, SEXP MustRunMatrixSEXP, SEXP OutageMatrixSEXP, SEXP StackOnMatrixSEXP, SEXP StackOffMatrixSEXP, SEXP HourIndexListSEXP, SEXP InitialStateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type OptParameters(OptParametersSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type PlantParameters(PlantParametersSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type UnitList(UnitListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PowerPriceVector(PowerPriceVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LoadVector(LoadVectorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type MustRunMatrix(MustRunMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type OutageMatrix(OutageMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type StackOnMatrix(StackOnMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type StackOffMatrix(StackOffMatrixSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type HourIndexList(HourIndexListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type InitialState(InitialStateSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeUnitCommitmentDP(OptParameters, PlantParameters, UnitList, PowerPriceVector, LoadVector, MustRunMatrix, OutageMatrix, StackOnMatrix, StackOffMatrix, HourIndexList, InitialState));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _DispatchOptimizationEngine_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _DispatchOptimizationEngine_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _DispatchOptimizationEngine_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _DispatchOptimizationEngine_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// stackCut
List stackCut(DataFrame PlantParameters, NumericMatrix LoadMatrix, NumericMatrix OutageMatrix, NumericMatrix MustRunMatrix, NumericVector PowerPrice, DataFrame HourIndexList, IntegerVector IncludeUnit);
RcppExport SEXP _DispatchOptimizationEngine_stackCut(SEXP PlantParametersSEXP, SEXP LoadMatrixSEXP, SEXP OutageMatrixSEXP, SEXP MustRunMatrixSEXP, SEXP PowerPriceSEXP, SEXP HourIndexListSEXP, SEXP IncludeUnitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type PlantParameters(PlantParametersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LoadMatrix(LoadMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type OutageMatrix(OutageMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type MustRunMatrix(MustRunMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PowerPrice(PowerPriceSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type HourIndexList(HourIndexListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type IncludeUnit(IncludeUnitSEXP);
    rcpp_result_gen = Rcpp::wrap(stackCut(PlantParameters, LoadMatrix, OutageMatrix, MustRunMatrix, PowerPrice, HourIndexList, IncludeUnit));
    return rcpp_result_gen;
END_RCPP
}
// sumCpp
double sumCpp(NumericVector x);
RcppExport SEXP _DispatchOptimizationEngine_sumCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sumCpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DispatchOptimizationEngine_fillConstraintMatrixGaps", (DL_FUNC) &_DispatchOptimizationEngine_fillConstraintMatrixGaps, 2},
    {"_DispatchOptimizationEngine_optimizeBatteryStorageDP", (DL_FUNC) &_DispatchOptimizationEngine_optimizeBatteryStorageDP, 6},
    {"_DispatchOptimizationEngine_optimizeGeneration", (DL_FUNC) &_DispatchOptimizationEngine_optimizeGeneration, 9},
    {"_DispatchOptimizationEngine_optimizeUnitCommitmentDP", (DL_FUNC) &_DispatchOptimizationEngine_optimizeUnitCommitmentDP, 11},
    {"_DispatchOptimizationEngine_rcpparma_hello_world", (DL_FUNC) &_DispatchOptimizationEngine_rcpparma_hello_world, 0},
    {"_DispatchOptimizationEngine_rcpparma_outerproduct", (DL_FUNC) &_DispatchOptimizationEngine_rcpparma_outerproduct, 1},
    {"_DispatchOptimizationEngine_rcpparma_innerproduct", (DL_FUNC) &_DispatchOptimizationEngine_rcpparma_innerproduct, 1},
    {"_DispatchOptimizationEngine_rcpparma_bothproducts", (DL_FUNC) &_DispatchOptimizationEngine_rcpparma_bothproducts, 1},
    {"_DispatchOptimizationEngine_stackCut", (DL_FUNC) &_DispatchOptimizationEngine_stackCut, 7},
    {"_DispatchOptimizationEngine_sumCpp", (DL_FUNC) &_DispatchOptimizationEngine_sumCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_DispatchOptimizationEngine(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
